(import
  scheme
  (chicken module)
  (distill base)
  (distill execline)
  (distill unix)
  (distill plan)
  (distill memo)
  (distill fs)
  (distill package)
  (distill service)
  (distill image)
  (distill kvector)
  (distill system)

  (pkg linux-virt-x86_64)
  (pkg curl)
  (pkg jq)
  (svc sshd)
  (plat qemu-system-x86_64))

;; notes on the digital ocean qemu configuration:
;;
;;  - QEMU is started in graphical mode, so the
;;    recovery console is on tty0, not ttyS0
;;  - eth0 is the "public" interface; eth1 is the "private" interface
;;  - volumes are attached as scsi disks (sda, sdb, etc.) rather than virtio disks
;;  - BUT the root disk is attached as a virtio disk (/dev/vda)
;;  - The "recovery ISO" appears to live on /dev/vdb
;;  - The 169.254/16 link-local network with the metadata instance
;;    is on eth0 (the *public* interface!), not eth1

(define d.o.meta-user (adduser 'dometa group: 'dometa))
(define d.o.meta-group (addgroup 'dometa '(dometa)))

;; create /tmp/dometa.json on each boot from instance metadata
(define d.o.metadata
  (let ((maddr "http://169.254.169.254/metadata/v1.json"))
    (make-service
     name:   'd.o.metadata
     inputs: (list curl iproute2)
     users:  (list d.o.meta-user)
     groups: (list d.o.meta-group)
     spec:   (oneshot*
              up: `(fdmove
                    -c 2 1
                    if (ip link set dev lo up)
                    if (ip link set dev eth0 up)
                    if (ip link set dev eth1 up)
                    ;; make the metadata endpoint reachable
                    if (ip addr add 169.254.169.1/16 dev eth0 scope link)
                    ;; create the metadata in a root-owned directory;
                    ;; its contents are critically important to the
                    ;; integrity of the system
                    ;; (but drop privs here on principle anyway)
                    if (/bin/umask "077"
                                   redirfd -w 1 /run/dometa.json
                                   s6-setuidgid dometa
                                   curl ,maddr)
                    ;; drop the link local address so that
                    ;; unprivileged software cannot access the
                    ;; metadata instance via SSRF, etc.
                    ip addr del 169.254.169.1/16 dev eth0)))))

;; create sshd authorized keys from instance metadata
(define d.o.pubkeys
  (make-service
   name: 'd.o.pubkeys
   inputs: (list jq (interned-symlink "/root/.ssh/authorized_keys"
                                      "/run/pubkeys"))
   after:  (list 'd.o.metadata)
   spec:   (oneshot*
            up: '(fdmove -c 2 1
                         /bin/umask "077"
                         redirfd -r 0 /run/dometa.json
                         redirfd -w 1 /run/pubkeys
                         jq -r ".public_keys[]"))))

;; a jq(1) script to convert droplet metadata
;; to an iproute(8) batch mode script
;;
;; note: custom images don't support public IPv6 (???)
;; so we don't bother looking for .interfaces.public[0].ipv6
(define jq-ifup-script "# convert a netmask string to cidr mask:
def cidr:
 {\"255\": 8, \"254\" : 7, \"252\": 6, \"248\": 5, \"240\": 4, \"224\" : 3, \"192\": 2, \"128\": 1, \"0\": 0}
as $btable | split(\".\") | map($btable[.]) | add;

# convert an object to addr/cidr notation
def addrmask: \"\\(.ip_address)/\\(.netmask | cidr)\";

.interfaces.private[0] as $private |
.interfaces.public[0] as $public |
$public.ipv4 as $pubv4 |
$private.ipv4 as $privv4 |
\"addr add \\($privv4 | addrmask) dev eth1\",
\"addr add \\($pubv4 | addrmask) dev eth0\",
\"addr add \\($public.anchor_ipv4 | addrmask) dev eth0\",
\"route add default via inet \\($pubv4.gateway) dev eth0 src \\($pubv4.ip_address)\"
")

;; bring up networking using instance metadata
(define d.o.networking
  (make-service
   name:   'net.d.o
   inputs: (list jq iproute2
                 (interned
                  "/etc/digital-ocean/ifup.jq" #o644 jq-ifup-script))
   after:  (list 'd.o.metadata)
   users:  (list d.o.meta-user)
   groups: (list d.o.meta-group)
   spec:   (oneshot*
            up: '(pipeline (redirfd -r 0 /run/dometa.json
                                    s6-setuidgid dometa
                                    jq -r -f /etc/digital-ocean/ifup.jq)
                           ip -b -))))

;; set /etc/resolv.conf from instance metadata
;; (by symlinking it to /run/resolv.conf and writing to that...)
(define d.o.resolv.conf
  (make-service
   name:   'd.o.resolv.conf
   inputs: (list jq (interned-symlink "/etc/resolv.conf" "/run/resolv.conf"))
   after:  (list 'd.o.metadata)
   users:  (list d.o.meta-user)
   groups: (list d.o.meta-group)
   spec:   (oneshot*
            up: '(redirfd -w 1 /run/resolv.conf
                          if (echo "# generated by d.o.resolv.conf")
                          forbacktickx -n server (redirfd -r 0 /run/dometa.json
                                                          s6-setuidgid dometa
                                                          jq -r ".dns.nameservers[]")
                          importas -u |-i| server server
                          echo nameserver $server))))

(define droplet
  (kwith
   qemu-system-x86_64
   ;; we need tty0 instead of ttyS0 because the DO recovery console
   ;; is attached as if it were a VGA screen
   cmdline: (:= '("root=/dev/vda2" "rootfstype=squashfs" "console=tty0"))
   services: (+= (list d.o.metadata d.o.pubkeys
                       d.o.resolv.conf d.o.networking))))
