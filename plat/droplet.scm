(import
  scheme
  (chicken module)
  (distill base)
  (distill unix)
  (distill plan)
  (distill memo)
  (distill package)
  (distill service)
  (distill image)
  (distill kvector)
  (distill system)

  (pkg linux-virt-x86_64)
  (pkg curl)
  (pkg jq)
  (svc sshd)
  (plat qemu-system))

;; notes on the digital ocean qemu configuration:
;;
;;  - QEMU is started in graphical mode, so the
;;    recovery console is on tty0, not ttyS0
;;  - eth0 is the "public" interface; eth1 is the "private" interface
;;  - volumes are attached as scsi disks (sda, sdb, etc.) rather than virtio disks
;;  - BUT the root disk is attached as a virtio disk (/dev/vda)
;;  - The "recovery ISO" appears to live on /dev/vdb
;;  - The 169.254/16 link-local network with the metadata instance
;;    is on eth0 (the *public* interface!), not eth1

(export droplet-sshd)

(define d.o.meta-user (adduser 'dometa group: 'dometa))
(define d.o.meta-group (addgroup 'dometa '(dometa)))

;; create /tmp/dometa.json on each boot from instance metadata
(define d.o.metadata
  (let ((maddr "http://169.254.169.254/metadata/v1.json"))
    (make-service
     name:   'd.o.metadata
     inputs: (list curl iproute2)
     users:  (list d.o.meta-user)
     groups: (list d.o.meta-group)
     spec:   (oneshot*
	      up: `((fdmove -c 2 1)
		    (if ((ip link set dev lo up)))
		    (if ((ip link set dev eth0 up)))
		    (if ((ip link set dev eth1 up)))
		    ;; make the metadata endpoint reachable
		    (if ((ip addr add 169.254.169.1/16 dev eth0 scope link)))
		    ;; create the metadata in a root-owned directory;
		    ;; its contents are critically important to the
		    ;; integrity of the system
		    ;; (but drop privs here on principle anyway)
		    (if ((/bin/umask "077")
			 (redirfd -w 1 /run/dometa.json)
			 (s6-setuidgid dometa)
			 (curl ,maddr)))
		    ;; drop the link local address so that
		    ;; unprivileged software cannot access the
		    ;; metadata instance via SSRF, etc.
		    (ip addr del 169.254.169.1/16 dev eth0))))))

;; create sshd authorized keys from instance metadata
(define d.o.pubkeys
  (make-service
   name: 'd.o.pubkeys
   inputs: (list jq (interned-symlink "/root/.ssh/authorized_keys"
				      "/run/pubkeys"))
   after:  (list 'd.o.metadata)
   spec:   (oneshot*
	    up: '((fdmove -c 2 1)
		  (redirfd -r 0 /run/dometa.json)
		  (redirfd -w 1 /run/pubkeys)
		  (jq -r ".public_keys[]")))))

(define jq-ifup-script #<<EOF
.interfaces.private[0] as $private |
.interfaces.public[0] as $public |
"addr add \($private.ipv4.ip_address)/16 dev eth1",
"addr add \($public.ipv4.ip_address)/20 dev eth0",
"addr add \($public.anchor_ipv4.ip_address)/16 dev eth0",
"route add default via inet \($public.ipv4.gateway) dev eth0 src \($public.ipv4.ip_address)"
# FIXME - DO doesn't support public IPv6 for custom images ... (add a comma above!)
# "-6 addr add \($public.ipv6.ip_address)/\($public.ipv6.cidr) dev eth0",
# "-6 route add default via inet6 \($public.ipv6.gateway) dev eth0 src \($public.ipv6.ip_address)"

EOF
)

;; bring up networking using instance metadata
(define d.o.networking
  (make-service
   name:   'net.d.o
   inputs: (list jq iproute2
		 (interned
		  "/etc/digital-ocean/ifup.jq" #o644 jq-ifup-script))
   after:  (list 'd.o.metadata)
   users:  (list d.o.meta-user)
   groups: (list d.o.meta-group)
   spec:   (oneshot*
	    up: '((pipeline ((redirfd -r 0 /run/dometa.json)
			     (s6-setuidgid dometa)
			     (jq -r -f /etc/digital-ocean/ifup.jq)))
		  (ip -b -)))))

;; set /etc/resolv.conf from instance metadata
;; (by symlinking it to /run/resolv.conf and writing to that...)
(define d.o.resolv.conf
  (make-service
   name:   'd.o.resolv.conf
   inputs: (list jq (interned-symlink "/etc/resolv.conf" "/run/resolv.conf"))
   after:  (list 'd.o.metadata)
   users:  (list d.o.meta-user)
   groups: (list d.o.meta-group)
   spec:   (oneshot*
	    up: '((redirfd -w 1 /run/resolv.conf)
		  (if ((echo "# generated by d.o.resolv.conf")))
		  (forbacktickx -n server ((redirfd -r 0 /run/dometa.json)
					   (s6-setuidgid dometa)
					   (jq -r ".dns.nameservers[]")))
		  (importas -u |-i| server server)
		  (echo nameserver $server)))))

;; droplet-sshd wraps the sshd service
;; in order to modify its dependencies
;; so that it always starts after pubkeys
;; have been pulled from the metadata
(define (droplet-sshd lines)
  (let ((svc (sshd lines)))
    (kupdate
     svc
     after: (cons 'd.o.pubkeys (service-after svc)))))

(define (droplet #!key (packages '()) (services '()))
  (build-system
   (qemu-system-x86_64-image linux-virt-x86_64)
   packages: packages
   services: (cons*
	      d.o.metadata
	      d.o.pubkeys
	      d.o.resolv.conf
	      d.o.networking
	      services)))
