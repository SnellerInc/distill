(import
  srfi-13
  srfi-69
  (chicken file))

(define mod-to-import (make-hash-table))

(define (lib-name form)
  (let ((n (cadr form)))
    (cond
      ((symbol? n) (symbol->string n))
      ((list? n)   (string-join (map symbol->string n) "."))
      (else        (error "unexpected library name" n)))))

(define (lib-import form)
  (string-append (lib-name form) ".import.scm"))

;; perform a left-associative fold
;; over forms beginning with the given symbol
(define (form-fold sym proc seed form)
  (let loop ((lst (cddr form))
	     (state seed))
    (if (null? lst)
	state	
	(let ((head (car lst))
	      (rest (cdr lst)))
	  (if (and (pair? head) (eq? (car head) sym))
	      (loop rest (proc state head))
	      (loop rest state))))))

(define (lib-imports form)
  (form-fold
    'import
    (lambda (lst im)
      (append lst (cdr im)))
    '()
    form))

(define (lib-includes form)
  (form-fold
    'include
    (lambda (lst inc)
      (cons (cadr inc) lst))
    '()
    form))

(define (lib-depends form)
  ;; a library depends on locally-defined *.sld
  ;; files and anything that is (include)'d
  (foldl
    (lambda (lst im)
      (let ((v (hash-table-ref/default mod-to-import im #f)))
	(if v (cons v lst) lst)))
    (lib-includes form)
    (lib-imports form)))

(define slds
  (map
    (lambda (f)
      (let ((form (call-with-input-file f (cut read <>))))
	(unless (eq? (car form) 'define-library)
	  (error "expected define-library form in" f))
	(hash-table-set! mod-to-import (cadr form) (string-append (lib-name form) ".import.scm"))
	(cons f form)))
    (glob "*.sld")))

(display "# generated by autodep.scm\n")
(for-each
  (lambda (sld)
    (let* ((form (cdr sld))
	   (file (car sld))
	   (deps (lib-depends form))
	   (name (lib-name form)))
      (display (string-append name ".import.scm "))
      (display (string-append name ".o: "))
      (display file)
      (display " ")
      (display (string-join deps " "))
      (newline)))
  slds)
